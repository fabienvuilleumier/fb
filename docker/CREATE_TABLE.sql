-- MySQL Script generated by MySQL Workbench
-- 07/04/15 00:39:21
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema fablab
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema fablab
-- -----------------------------------------------------

CREATE SCHEMA IF NOT EXISTS `fablab` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
-- GRANT ALL ON `fablab`.* to 'fablab'@'%' identified by 'fablab';
USE `fablab` ;

-- -----------------------------------------------------
-- Table `fablab`.`t_membership_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_membership_type` (
  `membership_type_id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `duration` INT NOT NULL,
  `price` DOUBLE NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`membership_type_id`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_user` (
  `user_id` INT NOT NULL AUTO_INCREMENT,
  `membership_type_id` INT NOT NULL,
  `auth_by_sql` TINYINT(1) NOT NULL DEFAULT 1 COMMENT 'deprecated',
  `login` VARCHAR(45) NOT NULL,
  `password_manager` VARCHAR(64) NULL,
  `password` VARCHAR(64) NULL,
  `password_salt` VARCHAR(45) NULL DEFAULT 'fablab',
  `firstname` VARCHAR(45) NOT NULL,
  `lastname` VARCHAR(45) NOT NULL,
  `email` VARCHAR(100) NOT NULL DEFAULT 'nomail',
  `date_inscr` DATETIME NOT NULL,
  `balance` FLOAT NOT NULL DEFAULT 0,
  `rfid` CHAR(16) NULL,
  `enabled` TINYINT(1) NOT NULL DEFAULT 1,
  `phone` VARCHAR(45) NULL,
  `address` VARCHAR(200) NULL,
  `birthdate` DATE NULL,
  `gender` TINYINT NULL,
  `comment` TEXT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`user_id`),
  UNIQUE INDEX `rfid_UNIQUE` (`rfid` ASC),
  INDEX `fk_t_users_t_membership_type1_idx` (`membership_type_id` ASC),
  UNIQUE INDEX `login_UNIQUE` (`login` ASC),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC),
  CONSTRAINT `fk_t_users_t_membership_type1`
    FOREIGN KEY (`membership_type_id`)
    REFERENCES `fablab`.`t_membership_type` (`membership_type_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_machine_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_machine_type` (
  `machine_type_id` INT NOT NULL AUTO_INCREMENT,
  `technicalname` VARCHAR(45) NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `restricted` TINYINT(1) NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`machine_type_id`),
  UNIQUE INDEX `technicalname_UNIQUE` (`technicalname` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_machine_status`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_machine_status` (
  `machine_status_id` INT NOT NULL AUTO_INCREMENT,
  `label` VARCHAR(45) NOT NULL,
  `color` VARCHAR(45) NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`machine_status_id`),
  UNIQUE INDEX `label_UNIQUE` (`label` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_machine_state`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_machine_state` (
  `machine_state_id` INT NOT NULL AUTO_INCREMENT,
  `label` VARCHAR(45) NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`machine_state_id`),
  UNIQUE INDEX `label_UNIQUE` (`label` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_machine`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_machine` (
  `machine_id` INT NOT NULL AUTO_INCREMENT,
  `code` VARCHAR(5) NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `acquisition_date` DATE NULL,
  `buy_price` FLOAT(10,2) NULL,
  `to_do_revision` TEXT NULL,
  `machine_type_id` INT NOT NULL,
  `machine_status_id` INT NOT NULL,
  `machine_state_id` INT NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`machine_id`),
  INDEX `fk_t_machines_t_machine_type1_idx` (`machine_type_id` ASC),
  UNIQUE INDEX `code_UNIQUE` (`code` ASC),
  INDEX `fk_t_machine_t_machine_status1_idx` (`machine_status_id` ASC),
  INDEX `fk_t_machine_t_machine_state1_idx` (`machine_state_id` ASC),
  CONSTRAINT `fk_t_machines_t_machine_type1`
    FOREIGN KEY (`machine_type_id`)
    REFERENCES `fablab`.`t_machine_type` (`machine_type_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t_machine_t_machine_status1`
    FOREIGN KEY (`machine_status_id`)
    REFERENCES `fablab`.`t_machine_status` (`machine_status_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t_machine_t_machine_state1`
    FOREIGN KEY (`machine_state_id`)
    REFERENCES `fablab`.`t_machine_state` (`machine_state_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_price_revision`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_price_revision` (
  `price_revision_id` INT(11) NOT NULL AUTO_INCREMENT,
  `date_revision` DATETIME NOT NULL,
  `membership_duration` INT(11) NOT NULL COMMENT 'in days',
  PRIMARY KEY (`price_revision_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 2
DEFAULT CHARACTER SET = utf8
COLLATE = utf8_general_ci;


-- -----------------------------------------------------
-- Table `fablab`.`t_reservation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_reservation` (
  `reservation_id` INT NOT NULL AUTO_INCREMENT,
  `date_start` DATETIME NOT NULL,
  `date_end` DATETIME NOT NULL,
  `user_id` INT NOT NULL,
  `machine_id` INT NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`reservation_id`),
  INDEX `fk_t_reservation_t_users_idx` (`user_id` ASC),
  INDEX `fk_t_reservation_t_machines1_idx` (`machine_id` ASC),
  CONSTRAINT `fk_t_reservation_t_machines1`
    FOREIGN KEY (`machine_id`)
    REFERENCES `fablab`.`t_machine` (`machine_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_payment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_payment` (
  `payment_id` INT NOT NULL AUTO_INCREMENT,
  `total` FLOAT NOT NULL,
  `date_payement` DATETIME NOT NULL,
  `amount` FLOAT(8,2) NOT NULL,
  `label` VARCHAR(45) NOT NULL,
  `discount` FLOAT(8,2) NULL,
  `discount_percent` TINYINT(1) NULL,
  `payed_for_fab_lab` TINYINT(1) NULL,
  `note` TEXT NULL,
  `account_credit` VARCHAR(45) NULL,
  `account_debit` VARCHAR(45) NULL,
  `refund` VARCHAR(45) NULL DEFAULT 'PAYMENT',
  `event` TINYINT(1) NULL DEFAULT 0,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `user_id` INT NOT NULL,
  `cashier_id` INT NULL,
  PRIMARY KEY (`payment_id`),
  INDEX `fk_t_payment_t_user1_idx1` (`user_id` ASC),
  INDEX `fk_t_payment_t_user2_idx1` (`cashier_id` ASC),
  CONSTRAINT `fk_t_payment_t_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `fablab`.`t_user` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t_payment_t_user2`
    FOREIGN KEY (`cashier_id`)
    REFERENCES `fablab`.`t_user` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_usage`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_usage` (
  `usage_id` INT NOT NULL AUTO_INCREMENT,
  `date_start` DATETIME NOT NULL,
  `price_hour` DOUBLE NOT NULL DEFAULT -1,
  `minutes` INT(11) NOT NULL,
  `additional_cost` FLOAT NULL,
  `discount` FLOAT(8,2) NULL,
  `discount_percent` TINYINT(1) NULL,
  `note` TEXT NULL,
  `total` FLOAT(8,2) NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `machine_id` INT NOT NULL,
  `membership_type_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `cashier_id` INT NULL,
  PRIMARY KEY (`usage_id`),
  INDEX `fk_t_utilisations_t_machines1_idx` (`machine_id` ASC),
  INDEX `fk_t_usages_t_membership_type1_idx` (`membership_type_id` ASC),
  INDEX `fk_t_usage_t_user1_idx1` (`user_id` ASC),
  INDEX `fk_t_usage_t_user2_idx` (`cashier_id` ASC),
  CONSTRAINT `fk_t_usage_t_cashier`
    FOREIGN KEY (`cashier_id`)
    REFERENCES `fablab`.`t_user` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t_usage_t_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `fablab`.`t_user` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t_usages_t_membership_type1`
    FOREIGN KEY (`membership_type_id`)
    REFERENCES `fablab`.`t_membership_type` (`membership_type_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t_utilisations_t_machines1`
    FOREIGN KEY (`machine_id`)
    REFERENCES `fablab`.`t_machine` (`machine_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_group` (
  `group_id` INT NOT NULL AUTO_INCREMENT,
  `technicalname` VARCHAR(45) NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`group_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_audit`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_audit` (
  `audit_id` INT NOT NULL AUTO_INCREMENT,
  `who` INT NULL,
  `action` INT NOT NULL,
  `object` INT NOT NULL,
  `object_id` INT NULL,
  `dateandtime` DATETIME NOT NULL,
  `success` TINYINT(1) NOT NULL,
  `content` VARCHAR(1000) NOT NULL,
  `detail` TEXT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`audit_id`),
  INDEX `fk_t_audit_t_user1_idx` (`who` ASC),
  CONSTRAINT `fk_t_audit_t_user1`
    FOREIGN KEY (`who`)
    REFERENCES `fablab`.`t_user` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_subscription`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_subscription` (
  `subscription_id` INT NOT NULL AUTO_INCREMENT COMMENT 'Is like a usage. User has to pay for it',
  `user_id` INT NOT NULL,
  `membership_type_id` INT NOT NULL,
  `date_subscription` DATETIME NOT NULL,
  `price` DOUBLE NOT NULL,
  `duration` INT NOT NULL,
  `comment` VARCHAR(255) NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`subscription_id`),
  INDEX `fk_t_subscription_t_membership_type1_idx` (`membership_type_id` ASC),
  INDEX `fk_t_subscription_t_user1_idx` (`user_id` ASC),
  CONSTRAINT `fk_t_subscription_t_membership_type1`
    FOREIGN KEY (`membership_type_id`)
    REFERENCES `fablab`.`t_membership_type` (`membership_type_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t_subscription_t_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `fablab`.`t_user` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_role` (
  `role_id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `technicalname` VARCHAR(45) NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`role_id`),
  UNIQUE INDEX `technicalname_UNIQUE` (`technicalname` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_configuration`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_configuration` (
  `configuration_id` INT NOT NULL AUTO_INCREMENT,
  `common_name` VARCHAR(150) NOT NULL,
  `conf_key` VARCHAR(45) NOT NULL,
  `conf_value` VARCHAR(500) NULL,
  PRIMARY KEY (`configuration_id`),
  UNIQUE INDEX `conf_key_UNIQUE` (`conf_key` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_revision`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_revision` (
  `revision_id` INT NOT NULL AUTO_INCREMENT,
  `revision_date` DATETIME NOT NULL,
  `revision_time` DATETIME NULL,
  `note` TEXT NULL,
  `revision_cost` FLOAT(10,2) NULL,
  `machine_id` INT NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`revision_id`),
  INDEX `fk_t_revision_t_machine1_idx` (`machine_id` ASC),
  INDEX `fk_t_revision_t_user1_idx` (`user_id` ASC),
  CONSTRAINT `fk_t_revision_t_machine1`
    FOREIGN KEY (`machine_id`)
    REFERENCES `fablab`.`t_machine` (`machine_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_ticket_status`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_ticket_status` (
  `ticket_status_id` INT NOT NULL AUTO_INCREMENT,
  `label` VARCHAR(45) NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`ticket_status_id`),
  UNIQUE INDEX `label_UNIQUE` (`label` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_ticket`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_ticket` (
  `ticket_id` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(45) NOT NULL,
  `description` TEXT NULL,
  `creation_date` DATE NOT NULL,
  `prevision_close_date` DATE NULL,
  `close_date` DATE NULL,
  `machine_id` INT NOT NULL,
  `ticket_status_id` INT NOT NULL,
  `creation_user_id` INT NOT NULL,
  `close_user_id` INT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`ticket_id`),
  INDEX `fk_t_ticket_t_ticket_status1_idx` (`ticket_status_id` ASC),
  INDEX `fk_t_ticket_t_machine1_idx` (`machine_id` ASC),
  UNIQUE INDEX `title_UNIQUE` (`title` ASC),
  INDEX `fk_t_ticket_t_user1_idx1` (`creation_user_id` ASC),
  INDEX `fk_t_ticket_t_user2_idx1` (`close_user_id` ASC),
  CONSTRAINT `fk_t_ticket_t_ticket_status1`
    FOREIGN KEY (`ticket_status_id`)
    REFERENCES `fablab`.`t_ticket_status` (`ticket_status_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t_ticket_t_machine1`
    FOREIGN KEY (`machine_id`)
    REFERENCES `fablab`.`t_machine` (`machine_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t_ticket_t_user1`
    FOREIGN KEY (`creation_user_id`)
    REFERENCES `fablab`.`t_user` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t_ticket_t_user2`
    FOREIGN KEY (`close_user_id`)
    REFERENCES `fablab`.`t_user` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_training_level`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_training_level` (
  `training_level_id` INT NOT NULL AUTO_INCREMENT,
  `label` VARCHAR(45) NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`training_level_id`),
  UNIQUE INDEX `label_UNIQUE` (`label` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_training`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_training` (
  `training_id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `price` FLOAT(8,2) NULL,
  `note` TEXT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `training_level_id` INT NOT NULL,
  `machine_type_id` INT NOT NULL,
  PRIMARY KEY (`training_id`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC),
  INDEX `fk_t_training_t_training_level1_idx` (`training_level_id` ASC),
  INDEX `fk_t_training_t_machine_type1_idx` (`machine_type_id` ASC),
  CONSTRAINT `fk_t_training_t_training_level1`
    FOREIGN KEY (`training_level_id`)
    REFERENCES `fablab`.`t_training_level` (`training_level_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t_training_t_machine_type1`
    FOREIGN KEY (`machine_type_id`)
    REFERENCES `fablab`.`t_machine_type` (`machine_type_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`r_training_prerequisite`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`r_training_prerequisite` (
  `prerequire_training_id` INT NOT NULL,
  `dependent_training_id` INT NOT NULL,
  INDEX `fk_t_prerequisite_t_training1_idx` (`prerequire_training_id` ASC),
  INDEX `fk_t_prerequisite_t_training2_idx` (`dependent_training_id` ASC),
  PRIMARY KEY (`prerequire_training_id`, `dependent_training_id`),
  CONSTRAINT `fk_t_prerequisite_t_training1`
    FOREIGN KEY (`prerequire_training_id`)
    REFERENCES `fablab`.`t_training` (`training_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t_prerequisite_t_training2`
    FOREIGN KEY (`dependent_training_id`)
    REFERENCES `fablab`.`t_training` (`training_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_supply_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_supply_type` (
  `supply_type_id` INT NOT NULL AUTO_INCREMENT,
  `label` VARCHAR(45) NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`supply_type_id`),
  UNIQUE INDEX `label_UNIQUE` (`label` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_supply_unity`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_supply_unity` (
  `supply_unity_id` INT NOT NULL AUTO_INCREMENT,
  `label` VARCHAR(45) NOT NULL,
  `floating` TINYINT(1) NOT NULL DEFAULT 0,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`supply_unity_id`),
  UNIQUE INDEX `label_UNIQUE` (`label` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_supply`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_supply` (
  `supply_id` INT NOT NULL AUTO_INCREMENT,
  `code` VARCHAR(5) NOT NULL,
  `label` VARCHAR(45) NOT NULL,
  `selling_price` FLOAT(8,2) NOT NULL,
  `unity_buying_price` FLOAT(8,2) NULL,
  `order_address` TEXT NULL,
  `quantity_stock` FLOAT(8,2) NOT NULL DEFAULT 0,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `supply_type_id` INT NOT NULL,
  `supply_unity_id` INT NOT NULL,
  `creation_user_id` INT NOT NULL,
  PRIMARY KEY (`supply_id`),
  UNIQUE INDEX `code_UNIQUE` (`code` ASC),
  INDEX `fk_t_supply_t_supply_type1_idx` (`supply_type_id` ASC),
  INDEX `fk_t_supply_t_supply_unity1_idx` (`supply_unity_id` ASC),
  INDEX `fk_t_supply_t_user1_idx1` (`creation_user_id` ASC),
  CONSTRAINT `fk_t_supply_t_supply_type1`
    FOREIGN KEY (`supply_type_id`)
    REFERENCES `fablab`.`t_supply_type` (`supply_type_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t_supply_t_supply_unity1`
    FOREIGN KEY (`supply_unity_id`)
    REFERENCES `fablab`.`t_supply_unity` (`supply_unity_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t_supply_t_user1`
    FOREIGN KEY (`creation_user_id`)
    REFERENCES `fablab`.`t_user` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_purchase`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_purchase` (
  `purchase_id` INT NOT NULL AUTO_INCREMENT,
  `purchase_date` DATE NOT NULL,
  `quantity` FLOAT(8,2) NOT NULL,
  `purchase_price` FLOAT(8,2) NOT NULL,
  `discount` FLOAT(8,3) NULL DEFAULT 0,
  `discount_percent` TINYINT(1) NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `supply_id` INT NOT NULL,
  `note` TEXT NULL,
  `user_id` INT NOT NULL,
  `cashier_id` INT NULL,
  PRIMARY KEY (`purchase_id`),
  INDEX `fk_t_buy_t_supply1_idx` (`supply_id` ASC),
  INDEX `fk_t_purchase_t_user1_idx` (`user_id` ASC),
  INDEX `fk_t_purchase_t_user2_idx` (`cashier_id` ASC),
  CONSTRAINT `fk_t_buy_t_supply1`
    FOREIGN KEY (`supply_id`)
    REFERENCES `fablab`.`t_supply` (`supply_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t_purchase_t_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `fablab`.`t_user` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t_purchase_t_user2`
    FOREIGN KEY (`cashier_id`)
    REFERENCES `fablab`.`t_user` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_certification`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_certification` (
  `certification_id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `certification_date` DATETIME NOT NULL,
  `certification_price` FLOAT(8,2) NULL,
  `note` TEXT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `training_id` INT NOT NULL,
  PRIMARY KEY (`certification_id`),
  INDEX `fk_r_user_training_t_training1_idx` (`training_id` ASC),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC),
  CONSTRAINT `fk_r_user_training_t_training1`
    FOREIGN KEY (`training_id`)
    REFERENCES `fablab`.`t_training` (`training_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_motion_stock`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_motion_stock` (
  `motion_stock_id` INT NOT NULL AUTO_INCREMENT,
  `motion_date` DATE NOT NULL,
  `quantity` FLOAT(8,2) NOT NULL,
  `io` VARCHAR(45) NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `supply_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`motion_stock_id`),
  INDEX `fk_t_mvt_stock_t_supply1_idx` (`supply_id` ASC),
  INDEX `fk_t_mvt_stock_t_user1_idx` (`user_id` ASC),
  CONSTRAINT `fk_t_mvt_stock_t_supply1`
    FOREIGN KEY (`supply_id`)
    REFERENCES `fablab`.`t_supply` (`supply_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`r_price_machine`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`r_price_machine` (
  `price_machine_id` INT NOT NULL AUTO_INCREMENT,
  `price` FLOAT(8,2) NOT NULL,
  `machine_type_id` INT NOT NULL,
  `membership_type_id` INT NOT NULL,
  PRIMARY KEY (`price_machine_id`),
  UNIQUE INDEX `uk_machine_member` (`machine_type_id` ASC, `membership_type_id` ASC),
  INDEX `fk_r_price_machine_t_machine_type1_idx` (`machine_type_id` ASC),
  INDEX `fk_r_price_machine_t_membership_type1_idx` (`membership_type_id` ASC),
  CONSTRAINT `fk_r_price_machine_t_machine_type1`
    FOREIGN KEY (`machine_type_id`)
    REFERENCES `fablab`.`t_machine_type` (`machine_type_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_r_price_machine_t_membership_type1`
    FOREIGN KEY (`membership_type_id`)
    REFERENCES `fablab`.`t_membership_type` (`membership_type_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`r_user_certification`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`r_user_certification` (
  `user_id` INT NOT NULL,
  `certification_id` INT NOT NULL,
  INDEX `fk_r_user_certification_t_certification1_idx` (`certification_id` ASC),
  PRIMARY KEY (`user_id`, `certification_id`),
  INDEX `fk_r_user_certification_t_user1_idx1` (`user_id` ASC),
  CONSTRAINT `fk_r_user_certification_t_certification1`
    FOREIGN KEY (`certification_id`)
    REFERENCES `fablab`.`t_certification` (`certification_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_r_user_certification_t_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `fablab`.`t_user` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`r_require_group_training`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`r_require_group_training` (
  `training_id` INT NOT NULL,
  `group_id` INT NOT NULL,
  PRIMARY KEY (`training_id`, `group_id`),
  INDEX `fk_t_training_has_t_group_t_group1_idx` (`group_id` ASC),
  INDEX `fk_t_training_has_t_group_t_training1_idx` (`training_id` ASC),
  CONSTRAINT `fk_t_training_has_t_group_t_training1`
    FOREIGN KEY (`training_id`)
    REFERENCES `fablab`.`t_training` (`training_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t_training_has_t_group_t_group1`
    FOREIGN KEY (`group_id`)
    REFERENCES `fablab`.`t_group` (`group_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`r_group_role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`r_group_role` (
  `role_id` INT NOT NULL,
  `group_id` INT NOT NULL,
  PRIMARY KEY (`role_id`, `group_id`),
  INDEX `fk_t_role_has_t_group_t_group1_idx` (`group_id` ASC),
  INDEX `fk_t_role_has_t_group_t_role1_idx` (`role_id` ASC),
  CONSTRAINT `fk_t_role_has_t_group_t_role1`
    FOREIGN KEY (`role_id`)
    REFERENCES `fablab`.`t_role` (`role_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t_role_has_t_group_t_group1`
    FOREIGN KEY (`group_id`)
    REFERENCES `fablab`.`t_group` (`group_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`r_group_user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`r_group_user` (
  `group_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`group_id`, `user_id`),
  INDEX `fk_r_group_user_t_group1_idx` (`group_id` ASC),
  INDEX `fk_r_group_user_t_user1` (`user_id` ASC),
  CONSTRAINT `fk_r_group_user_t_group1`
    FOREIGN KEY (`group_id`)
    REFERENCES `fablab`.`t_group` (`group_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_r_group_user_t_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `fablab`.`t_user` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_event_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_event_type` (
  `event_type_id` INT NOT NULL AUTO_INCREMENT,
  `label` VARCHAR(45) NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`event_type_id`),
  UNIQUE INDEX `label_UNIQUE` (`label` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_event`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_event` (
  `event_id` INT NOT NULL AUTO_INCREMENT,
  `date_start` DATE NOT NULL,
  `date_end` DATE NOT NULL,
  `time_start` DATETIME NOT NULL,
  `time_end` DATETIME NOT NULL,
  `title` VARCHAR(45) NOT NULL,
  `theme` VARCHAR(150) NULL,
  `place` VARCHAR(150) NULL,
  `description` TEXT NULL,
  `price` FLOAT(8,2) NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `event_type_id` INT NOT NULL,
  `supervisor_id` INT NOT NULL,
  PRIMARY KEY (`event_id`),
  INDEX `fk_t_event_t_event_type1_idx` (`event_type_id` ASC),
  INDEX `fk_t_event_t_user1_idx` (`supervisor_id` ASC),
  UNIQUE INDEX `title_UNIQUE` (`title` ASC),
  CONSTRAINT `fk_t_event_t_event_type1`
    FOREIGN KEY (`event_type_id`)
    REFERENCES `fablab`.`t_event_type` (`event_type_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t_event_t_user1`
    FOREIGN KEY (`supervisor_id`)
    REFERENCES `fablab`.`t_user` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_event_module`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_event_module` (
  `event_module_id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `description` TEXT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `machine_type_id` INT NULL,
  PRIMARY KEY (`event_module_id`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC),
  INDEX `fk_t_event_module_t_machine_type1_idx` (`machine_type_id` ASC),
  CONSTRAINT `fk_t_event_module_t_machine_type1`
    FOREIGN KEY (`machine_type_id`)
    REFERENCES `fablab`.`t_machine_type` (`machine_type_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`t_event_person`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`t_event_person` (
  `event_person_id` INT NOT NULL AUTO_INCREMENT,
  `firstname` VARCHAR(45) NOT NULL,
  `lastname` VARCHAR(45) NOT NULL,
  `email` VARCHAR(150) NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`event_person_id`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`r_event_module_prerequisite`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`r_event_module_prerequisite` (
  `event_module_prerequiste` INT NOT NULL,
  `event_module_dependent` INT NOT NULL,
  PRIMARY KEY (`event_module_prerequiste`, `event_module_dependent`),
  INDEX `fk_t_event_module_has_t_event_module_t_event_module2_idx` (`event_module_dependent` ASC),
  INDEX `fk_t_event_module_has_t_event_module_t_event_module1_idx` (`event_module_prerequiste` ASC),
  CONSTRAINT `fk_t_event_module_has_t_event_module_t_event_module1`
    FOREIGN KEY (`event_module_prerequiste`)
    REFERENCES `fablab`.`t_event_module` (`event_module_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t_event_module_has_t_event_module_t_event_module2`
    FOREIGN KEY (`event_module_dependent`)
    REFERENCES `fablab`.`t_event_module` (`event_module_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`r_event_module`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`r_event_module` (
  `event_id` INT NOT NULL,
  `event_module_id` INT NOT NULL,
  PRIMARY KEY (`event_id`, `event_module_id`),
  INDEX `fk_t_event_has_t_event_module_t_event_module1_idx` (`event_module_id` ASC),
  INDEX `fk_t_event_has_t_event_module_t_event1_idx` (`event_id` ASC),
  CONSTRAINT `fk_t_event_has_t_event_module_t_event1`
    FOREIGN KEY (`event_id`)
    REFERENCES `fablab`.`t_event` (`event_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t_event_has_t_event_module_t_event_module1`
    FOREIGN KEY (`event_module_id`)
    REFERENCES `fablab`.`t_event_module` (`event_module_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`r_event_organisator`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`r_event_organisator` (
  `event_id` INT NOT NULL,
  `event_person_id` INT NOT NULL,
  PRIMARY KEY (`event_id`, `event_person_id`),
  INDEX `fk_t_event_has_t_event_person_t_event_person1_idx` (`event_person_id` ASC),
  INDEX `fk_t_event_has_t_event_person_t_event1_idx` (`event_id` ASC),
  CONSTRAINT `fk_t_event_has_t_event_person_t_event1`
    FOREIGN KEY (`event_id`)
    REFERENCES `fablab`.`t_event` (`event_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t_event_has_t_event_person_t_event_person1`
    FOREIGN KEY (`event_person_id`)
    REFERENCES `fablab`.`t_event_person` (`event_person_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`r_event_participant`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`r_event_participant` (
  `event_id` INT NOT NULL,
  `event_person_id` INT NOT NULL,
  PRIMARY KEY (`event_id`, `event_person_id`),
  INDEX `fk_t_event_has_t_event_person_t_event_person2_idx` (`event_person_id` ASC),
  INDEX `fk_t_event_has_t_event_person_t_event2_idx` (`event_id` ASC),
  CONSTRAINT `fk_t_event_has_t_event_person_t_event2`
    FOREIGN KEY (`event_id`)
    REFERENCES `fablab`.`t_event` (`event_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t_event_has_t_event_person_t_event_person2`
    FOREIGN KEY (`event_person_id`)
    REFERENCES `fablab`.`t_event_person` (`event_person_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fablab`.`r_event_aquired_module`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fablab`.`r_event_aquired_module` (
  `event_person_id` INT NOT NULL,
  `event_module_id` INT NOT NULL,
  PRIMARY KEY (`event_person_id`, `event_module_id`),
  INDEX `fk_t_event_person_has_t_event_module_t_event_module1_idx` (`event_module_id` ASC),
  INDEX `fk_t_event_person_has_t_event_module_t_event_person1_idx` (`event_person_id` ASC),
  CONSTRAINT `fk_t_event_person_has_t_event_module_t_event_person1`
    FOREIGN KEY (`event_person_id`)
    REFERENCES `fablab`.`t_event_person` (`event_person_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_t_event_person_has_t_event_module_t_event_module1`
    FOREIGN KEY (`event_module_id`)
    REFERENCES `fablab`.`t_event_module` (`event_module_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `fablab` ;

-- -----------------------------------------------------
-- procedure update_machine_existing_code
-- -----------------------------------------------------

DELIMITER $$
USE `fablab`$$
CREATE  PROCEDURE `update_machine_existing_code`()
BEGIN
DECLARE done INT DEFAULT FALSE;
DECLARE currentId INT;
DECLARE currentName VARCHAR(45);
DECLARE newCode VARCHAR(45);
DECLARE cur CURSOR FOR SELECT machine_id,name from t_machine;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
OPEN cur;
	read_loop: LOOP
		FETCH cur INTO currentId, currentName;
		IF done THEN
			LEAVE read_loop;
		END IF;
        SELECT name into newCode FROM t_machine where machine_id = currentId;
        SET newCode = substr(newCode, 1, 5);
        select newCode;
		UPDATE t_machine SET code = newCode WHERE machine_id = currentId;
    END LOOP;
CLOSE cur;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

USE `fablab`;

DELIMITER $$
USE `fablab`$$
CREATE
TRIGGER `fablab`.`t_membership_type_AFTER_INSERT`
AFTER INSERT ON `fablab`.`t_membership_type`
FOR EACH ROW
BEGIN
	DECLARE done INT DEFAULT FALSE;
  DECLARE mtId INT;
  DECLARE cur CURSOR FOR SELECT machine_type_id FROM t_machine_type;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
  OPEN cur;
  read_loop: LOOP
    FETCH cur INTO mtId;
    IF done THEN
      LEAVE read_loop;
    END IF;
      INSERT INTO r_price_machine(price, machine_type_id, membership_type_id) VALUES (0.0, mtId, new.membership_type_id);
  END LOOP;
  CLOSE cur;
END$$

USE `fablab`$$
CREATE DEFINER = CURRENT_USER TRIGGER `fablab`.`t_user_AFTER_INSERT` AFTER INSERT ON `t_user` FOR EACH ROW
BEGIN
	INSERT INTO t_event_person (lastname, firstname, email) 
		VALUES (new.lastname, new.firstname, new.email);
END
$$

USE `fablab`$$
CREATE
TRIGGER `fablab`.`t_machine_type_AFTER_INSERT`
AFTER INSERT ON `fablab`.`t_machine_type`
FOR EACH ROW
BEGIN
	DECLARE done INT DEFAULT FALSE;
  DECLARE mstId INT;
  DECLARE cur CURSOR FOR SELECT membership_type_id FROM t_membership_type;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
  OPEN cur;
  read_loop: LOOP
    FETCH cur INTO mstId;
    IF done THEN
      LEAVE read_loop;
    END IF;
      INSERT INTO r_price_machine(price, machine_type_id, membership_type_id) VALUES (0.0, new.machine_type_id, mstId);
  END LOOP;

  CLOSE cur;
END$$

USE `fablab`$$
CREATE
TRIGGER `fablab`.`t_supply_AFTER_INSERT`
AFTER INSERT ON `fablab`.`t_supply`
FOR EACH ROW
BEGIN
		INSERT INTO t_motion_stock (motion_date, user_id, supply_id, quantity, io) 
		VALUES (CURDATE(), new.creation_user_id, new.supply_id, new.quantity_stock, "Entrée");
END$$

USE `fablab`$$
CREATE
TRIGGER `fablab`.`t_purchase_AFTER_INSERT`
AFTER INSERT ON `fablab`.`t_purchase`
FOR EACH ROW
BEGIN
	IF new.quantity >= 0 THEN
		INSERT INTO t_motion_stock (motion_date, supply_id, user_id, quantity, io) 
		VALUES (new.purchase_date, new.supply_id, new.user_id, new.quantity, "Sortie");
        ELSE 
        INSERT INTO t_motion_stock (motion_date, supply_id, user_id, quantity, io) 
		VALUES (new.purchase_date, new.supply_id, new.user_id, new.quantity, "Correction");        
       END IF;
END$$


DELIMITER ;
